TODO:
    * Player attack(multi frame)
        * player cannot move while attacking
        * damage cancels the attack
    * Queue key inputs rather than poll their current state
    * Add enemy knockback
    * Instancing
    

Collision Resolution: Stack system
    * Run one pass through all collisions and call the collision method() between each member

    * Each object now "requests" its new position and is then resolved via the method:
        * Sort the stack by highest velocity to prioritise locking in things with higher velocity first
        * resolve the first collision prioritising pushing away the char with less velocity
        * That player's position is now locked
        * Recheck the new players position and see if there are any collisions by referencing the spatial map at the new location
        * Insert the new players collision preserving the velocity order
        * Loop until all collisions are resolved

OPTIMIZATIONS:
    * Currently the client loops through the entire list of players to identify which data is itself
        * Might want to consider using a map
    * object layer in tilemap should not use sprites rather it should use a solid color tile that will be covered
THINGS TO THINK ABOUT ADDING:
    * Change collision resolution to be vector based

BUGS:
* if player spawns on enemy in corner the collision breaks
* diagonal movement pushing another player into a corner breaks collision
* diagonal movement onto a wall catches the player if moving into a north or south wall