TODO:
    * Player attack(multi frame)
        * damage cancels the attack
    * Queue key inputs rather than poll their current state
    * Goblin swordsman
    * Item drop system
    * Shopkeeper
    * Goblin Mage
    * Rammer boss
    * Add player and shader
    * Login system
    * Chat/party system
    * Instancing
    * Migrate item drops/char info, etc to database
    
Chat system:
    * Simple chat system. 
    1. Client sends message to game server. 
    2. Server broadcasts message to all other players
    3. Server logs message to SQL server

Collision Resolution: Stack system
    * Run one pass through all collisions and call the collision method() between each member

    * Each object now "requests" its new position and is then resolved via the method:
        * Sort the stack by highest velocity to prioritise locking in things with higher velocity first
        * resolve the first collision prioritising pushing away the char with less velocity
        * That player's position is now locked
        * Recheck the new players position and see if there are any collisions by referencing the spatial map at the new location
        * Insert the new players collision preserving the velocity order
        * Loop until all collisions are resolved

OPTIMIZATIONS:
    * Currently the client loops through the entire list of players to identify which data is itself
        * Might want to consider using a map
    * object layer in tilemap should not use sprites rather it should use a solid color tile that will be covered
THINGS TO THINK ABOUT ADDING:
    * Change collision resolution to be vector based

BUGS:
* Sometimes attacks will not spawn(client side?)
* if player spawns on enemy in corner the collision breaks
* diagonal movement pushing another player into a corner breaks collision
* diagonal movement onto a wall catches the player if moving into a north or south wall
* sometimes enemy -> player collision does not register